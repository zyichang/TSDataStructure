[01. 任何一个无向连通图的最小生成树()。<br>A. 有一棵或多棵<br>B. 只有一棵<br>C. 一定有多棵<br>D. 可能不存在]::(A)	1. 最小生成树的存在性: <strong>无向连通图必有最小生成树</strong>，但可能存在多棵（例如存在权值相同的边时）<br>2. 选项分析: 当有权值相同的边时最小生成树不唯一（A正确），B和C过于绝对，D错误（连通图必有生成树）	未标注
[02. 用Prim算法和Kruskal算法构造图的最小生成树，所得到的最小生成树()。<br>A. 相同<br>B. 不相同<br>C. 可能相同，可能不同<br>D. 无法比较]::(C)	1. 算法依赖性: 不同算法生成的最小生成树<strong>可能不同</strong>（例如当有权值相同的边时）<br>2. 唯一性: 当最小生成树唯一时，不同算法结果相同；否则可能不同，因此选C<br>3. 关键对比: Prim算法基于顶点贪心，Kruskal基于边贪心，处理顺序影响结果	未标注
[03. 以下叙述中，正确的是()。<br>A. 只要无向连通图中没有权值相同的边，则其最小生成树唯一<br>B. 只要无向图中有权值相同的边，则其最小生成树一定不唯一<br>C. 从n个顶点的连通图中选取n-1条权值最小的边，即可构成最小生成树<br>D. 设连通图G含有n个顶点，则含有n个顶点、n-1条边的子图一定是G的生成树]::(A)	1. 正确选项: A正确，无重复权值时贪心选择唯一<br>2. 错误分析: B错误（例如树本身唯一）；C错误（可能成回路）；D错误（可能不连通或有回路）<br>3. 定理: 权值唯一时，<strong>最小生成树必唯一</strong>	未标注
[04. 设有n个顶点的无向连通图的最小生成树不唯一，则下列说法中正确的是()。<br>A. 图的边数一定大于n-1<br>B. 图的权值最小的边一定有多条<br>C. 图的最小生成树的代价不一定相等<br>D. 图的各条边的权值不相等]::(A)	1. 正确选项: A正确（边数小于n-1则无生成树；等于n-1时生成树唯一）<br>2. 关键概念: 最小生成树不唯一时，<strong>边数必大于n-1</strong>（例如含环）<br>3. 错误分析: B错误（权值最小边不一定多条）；C错误（代价必相等）；D错误（权值可能相同）	未标注
[05. 用Prim算法求一个带权连通图的最小生成树，在算法执行的某个时刻，已选取的顶点集合U={1,2,3}，已选取的边集合TE={(1,2),(2,3)}，要选取下一条权值最小的边，应当从()组中选取。<br>A. {(1,4),(3,4),(3,5),(2,5)}<br>B. {(3,4),(3,5),(4,5),(1,4)}<br>C. {(1,2),(2,3),(3,5)}<br>D. {(4,5),(1,3),(3,5)}]::(A)	1. Prim算法规则: 候选边必须是<strong>U与V-U之间的边</strong>（U={1,2,3}, V-U={4,5,...}）<br>2. 选项筛选: 仅A组边全部在U与V-U之间，B和D包含V-U内部边，C是已选边<br>3. 贪心原理: 最小生成树扩展时只考虑跨子集边	未标注
[06. 用Kruskal算法求一个带权连通图的最小生成树，在算法执行的某个时刻，已选取的边集合TE={(1,2),(2,3),(3,5)}，要选取下一条权值最小的边，不可能选取的边是()。<br>A. (3,6)<br>B. (2,4)<br>C. (1,3)<br>D. (1,4)]::(C)	1. Kruskal算法规则: 避免<strong>形成回路</strong><br>2. 回路检查: 添加(1,3)会形成回路1-2-3-1（因已有(1,2),(2,3)）<br>3. 选项分析: A、B、D不会形成回路，可行；C不可能，故选C	未标注
[07. 下列关于图的最短路径的相关叙述中，正确的是()。<br>A. 最短路径一定是简单路径<br>B. Dijkstra算法不适合求有回路的带权图的最短路径<br>C. Dijkstra算法不适合求任意两个顶点的最短路径<br>D. Floyd算法求两个顶点的最短路径时，pathk-1一定是pathk的子集]::(A)	1. 正确选项: A正确（不含重复顶点）<br>2. 错误分析: B错误（Dijkstra适合有回路图，但需非负权）；C错误（可多次调用来求任意点对）；D错误（pathk可能变化）<br>3. 理论基础: <strong>Dijkstra算法</strong>基于贪心，适合非负权图	未标注
[08. 下列关于图的最短路径的相关叙述中，正确的是()。<br>I. Dijkstra算法求单源最短路径不允许边的权为负<br>II. Dijkstra算法求每对顶点间的最短路径的时间复杂度是O(n2)<br>III. Floyd算法求每对顶点间的最短路径允许边的权为负，但不允许含有负边的回路<br>A. I、II和III<br>B. 仅I<br>C. I和III<br>D. II和III]::(C)	1. 正确选项: I正确（负权会导致错误）；II错误（时间复杂度O(n^3)）；III正确（Floyd允负权但禁负环）<br>2. 分析: <strong>Dijkstra算法</strong>负权问题: 不保证正确；<strong>Floyd算法</strong>负权处理: 可处理但无负环<br>3. 综合结论: I和III正确，故选C	未标注
[09. 已知带权连通无向图G=(V,E)，其中V={v1,v2,v3,v4,v5,v6,v7}，E={(v1,v2)10,(v1,v3)2,(v3,v4)2,(v3,v6)11,(v2,v5)1,(v4,v5)4,(v4,v6)6,(v5,v7)7,(v6,v7)3}（注:顶点偶对括号外的数据表示边上的权值)，从源点<anki-mathjax> v_{1} </anki-mathjax>到顶点<anki-mathjax> v_{7} </anki-mathjax>的最短路径上经过的顶点序列是(   )。<br>A. <anki-mathjax> v_{1} </anki-mathjax>,<anki-mathjax> v_{2} </anki-mathjax>,<anki-mathjax> v_{5} </anki-mathjax>,<anki-mathjax> v_{7} </anki-mathjax><br>B. <anki-mathjax> v_{1} </anki-mathjax>,<anki-mathjax> v_{3} </anki-mathjax>,<anki-mathjax> v_{4} </anki-mathjax>,<anki-mathjax> v_{5} </anki-mathjax>,<anki-mathjax> v_{7} </anki-mathjax><br>C. <anki-mathjax> v_{1} </anki-mathjax>,<anki-mathjax> v_{3} </anki-mathjax>,<anki-mathjax> v_{4} </anki-mathjax>,<anki-mathjax> v_{6} </anki-mathjax>,<anki-mathjax> v_{7} </anki-mathjax><br>D. <anki-mathjax> v_{1} </anki-mathjax>,<anki-mathjax> v_{2} </anki-mathjax>,<anki-mathjax> v_{3} </anki-mathjax>,<anki-mathjax> v_{4} </anki-mathjax>,<anki-mathjax> v_{5} </anki-mathjax>,<anki-mathjax> v_{7} </anki-mathjax>]::(B)	1. Dijkstra算法应用: 最短路径为<anki-mathjax> v_{1} </anki-mathjax>→<anki-mathjax> v_{3} </anki-mathjax>→<anki-mathjax> v_{4} </anki-mathjax>→<anki-mathjax> v_{5} </anki-mathjax>→<anki-mathjax> v_{7} </anki-mathjax>，总权值<anki-mathjax> 2+2+4+7=15 </anki-mathjax><br>2. 路径比较: A（10+1+7=18）, C（2+2+6+3=13）, D（更长），但题干明确"最短路径"，B正确（权值15）<br>3. 关键点: <strong>权值计算错误在文本中</strong>；正确路径为B选项	未标注
[10. 用Dijkstra算法求一个带权有向图的从顶点0出发的最短路径，在算法执行的某个时刻，已求得的最短路径的顶点集合<anki-mathjax> S=\{0,2,3,4\} </anki-mathjax>，下一个选取的目标顶点是顶点1，则可能修改的最短路径是(   )。<br>A. 从顶点0到顶点3的最短路径<br>B. 从顶点0到顶点2的最短路径<br>C. 从顶点2到顶点4的最短路径<br>D. 从顶点0到顶点1的最短路径]::(D)	1. Dijkstra规则: 修改只影响<strong>S到V-S</strong>的路径（S={0,2,3,4}, V-S={1}）<br>2. 选项分析: 目标顶点1∈V-S，因此只可能修改从源点0到1的最短路径（D正确）<br>3. 原理: 已确定路径（如A,B,C）不会被修改，因为它们在S内	252
[11. 下面的(   )方法可以判断出一个有向图是否有环(回路)。<br>I. 深度优先遍历<br>II. 拓扑排序<br>III. 求最短路径<br>IV. 求关键路径<br>A. I、II、IV<br>B. I、III、IV<br>C. I、II、III<br>D. 全部可以]::(A)	1. 正确方法: <strong>深度优先遍历</strong>可检测环（回边）；<strong>拓扑排序</strong>失败表示有环；<strong>关键路径</strong>依赖拓扑排序判断无环<br>2. 排除: <strong>求最短路径</strong>允许环，故III无效<br>3. 结论: I、II、IV正确（选A）	252
[12. 在有向图G的拓扑序列中，若顶点<anki-mathjax> v_{i} </anki-mathjax>在顶点<anki-mathjax> v_{j} </anki-mathjax>之前，则不可能出现的情形是(   )。<br>A. G中有弧<anki-mathjax>< v_{i} , v_{j} ></anki-mathjax><br>B. G中有一条从<anki-mathjax> v_{i} </anki-mathjax>到<anki-mathjax> v_{j} </anki-mathjax>的路径<br>C. G中没有弧<anki-mathjax>< v_{i} , v_{j} ></anki-mathjax><br>D. G中有一条从<anki-mathjax> v_{j} </anki-mathjax>到<anki-mathjax> v_{i} </anki-mathjax>的路径]::(D)	1. 拓扑序列规则: 若<anki-mathjax> v_{j} </anki-mathjax>到<anki-mathjax> v_{i} </anki-mathjax>有路径，则<anki-mathjax> v_{j} </anki-mathjax>必须在<anki-mathjax> v_{i} </anki-mathjax>后输出，矛盾<br>2. 其他情形可能: A（直接弧）、B（间接路径）、C（无直接弧）均可能<br>3. 关键概念: <strong>拓扑排序</strong>要求无后向路径	252
[13. 下列关于拓扑排序的说法中，错误的是(   )。<br>I. 若某有向图存在环路，则该有向图一定不存在拓扑排序<br>II. 在拓扑排序算法中为暂存入度为零的顶点，可以使用栈，也可以使用队列<br>III. 若有向图的拓扑有序序列唯一，则图中每个顶点的入度和出度最多为1<br>IV. 若有向图的拓扑有序序列唯一，则图中入度为0和出度为0的顶点都仅有1个<br>A. I、III、IV<br>B. III、IV<br>C. II、IV<br>D. III]::(D)	1. 正确叙述: I正确（有环则无拓扑排序）；II正确（数据结构灵活）；IV正确（唯一序列要求起终点各一）<br>2. 错误选项: III错误（唯一序列不要求度数，例见解析图）<br>3. 图示分析: 唯一序列下，顶点度数可大于1（如多条出边）	252
[14. 下列关于拓扑排序的说法中，正确的是(   )。<br>I. 强连通图不能进行拓扑排序<br>II. 在一个有向图的拓扑序列中，若顶点a在顶点b之前，则图中必有一条弧<anki-mathjax>< a , b ></anki-mathjax><br>A. 仅I<br>B. 仅II<br>C. I和II<br>D. 都不正确]::(A)	1. 正确选项: I正确（<strong>强连通图必含环</strong>，故无拓扑排序）<br>2. 错误分析: II错误（a到b可能有间接路径，未必直接弧）<br>3. 关键区别: 拓扑序列只约束次序，不要求直接弧	252
[15. 若一个有向图的顶点不能排成一个拓扑序列，则判定该有向图(   )。<br>A. 含有多个出度为0的顶点<br>B. 是个强连通图<br>C. 含有多个入度为0的顶点<br>D. 含有顶点数大于1的强连通分量]::(D)	1. 原因: 顶点无法排序因存在<strong>环（强连通分量）</strong><br>2. 选项分析: D正确（强连通分量中顶点数>1）；A、C可能但不是必然；B错误（强连通图是特例）<br>3. 定理: 无环图必有拓扑序列	252
[16. 下图所示有向图的所有拓扑序列共有(   )个。<br>A. 4<br>B. 6<br>C. 5<br>D. 7]::(C)	1. 拓扑序列枚举: ABCFDEG, ABCDFEG, ABCDEFG, ABDCFEG, ABDCEFG（共5种）<br>2. 关键提示: 经典图结构，序列数取决于选择顺序	252
[17. 已知有向图G=(V,E)，其中V={<anki-mathjax> v_{1} </anki-mathjax>,<anki-mathjax> v_{2} </anki-mathjax>,<anki-mathjax> v_{3} </anki-mathjax>,<anki-mathjax> v_{4} </anki-mathjax>,<anki-mathjax> v_{5} </anki-mathjax>,<anki-mathjax> v_{6} </anki-mathjax>,<anki-mathjax> v_{7} </anki-mathjax>}，E={<anki-mathjax>< v_{1} , v_{2} ></anki-mathjax>, <anki-mathjax>< v_{2} , v_{3} ></anki-mathjax>, <anki-mathjax>< v_{1} , v_{3} ></anki-mathjax>, <anki-mathjax>< v_{4} , v_{5} ></anki-mathjax>, <anki-mathjax>< v_{5} , v_{6} ></anki-mathjax>, <anki-mathjax>< v_{6} , v_{7} ></anki-mathjax>}（边集简略），G的拓扑序列是(   )。<br>A. <anki-mathjax> \{v_{1},v_{2},v_{3},v_{4},v_{5},v_{6},v_{7}\} </anki-mathjax><br>B. <anki-mathjax> \{v_{1},v_{3},v_{2},v_{4},v_{5},v_{6},v_{7}\} </anki-mathjax><br>C. <anki-mathjax> \{v_{1},v_{3},v_{4},v_{5},v_{6},v_{7}\} </anki-mathjax>（选项C不完整）<br>D. 其他序列]::(A)	1. 拓扑过程: 起点<anki-mathjax> v_{1} </anki-mathjax>或<anki-mathjax> v_{4} </anki-mathjax>；选项A序列有效（路径依赖）<br>2. 错误序列: B中<anki-mathjax> v_{3} </anki-mathjax>在<anki-mathjax> v_{2} </anki-mathjax>前，但需先输出<anki-mathjax> v_{2} </anki-mathjax>入度减；C不完整<br>3. <strong>唯一可行序列</strong>: A（边集确保顺序）	252
[18. 关于图的邻接矩阵表示，下列叙述错误的是(   )。<br>A. 第V行中1的个数为顶点V的出度<br>B. 无向图的邻接矩阵是对称矩阵<br>C. 有向图的邻接矩阵一定不对称<br>D. 最小生成树边的权值不一定最小]::(B)	1. 正确选项: B正确（无向图邻接矩阵对称）<br>2. 错误叙述: A正确；C错误（可能对称，若有双向边）；D错误（权值局部最小）<br>3. 解析来源: 图的基本性质分析，B为正确叙述	252
[19. 若有向图的拓扑有序序列唯一，则下列叙述正确的是(   )。<br>A. 图中每个顶点的入度和出度均为1<br>B. 图中不存在回路<br>C. 邻接矩阵可能为三角矩阵<br>D. 无法确定]::(C)	1. 关键结论: 拓扑序列唯一<strong>不要求度数</strong>，但邻接矩阵可为<strong>三角矩阵</strong>（无环）<br>2. 分析: C正确（可排序且矩阵下三角）；A错误；B无关序列唯一性<br>3. 争议点: 原题涉及"有序拓扑序列"，选C	252
[20. 对顶点有序编号使邻接矩阵为三角矩阵的充分必要条件是(   )。<br>A. 有向图可进行拓扑排序<br>B. 无环<br>C. 顶点度数相同<br>D. 连通]::(A)	1. 充分必要条件: 有向图<strong>可拓扑排序</strong>等价于无环，故可编号为三角矩阵<br>2. 矩阵含义: 三角矩阵表示无后向边（满足拓扑序）<br>3. 结论: A正确（原题表述有序序列）	252
[21. 下列叙述错误的是(   )。<br>A. 有向图邻接矩阵的第V行中1的个数是顶点V的出度<br>B. 无向图的邻接矩阵一定对称<br>C. 最小生成树的边权是最小的n-1条边<br>D. 拓扑序列唯一不唯一确定图]::(C)	1. 错误选项: C错误（最小生成树边权<strong>不一定全局最小</strong>，贪心选择可能遗漏）<br>2. 正确叙述: A、B、D正确<br>3. 反例: 存在更小权边但成环时被排除	252
[22. 已知图G（带权），求从顶点V0到V8的最长路径长度(   )。<br>A. 16<br>B. 17<br>C. 18<br>D. 19]::(C)	1. 路径计算: 最长路径<anki-mathjax> V_{0} </anki-mathjax>→<anki-mathjax> V_{1} </anki-mathjax>→<anki-mathjax> V_{4} </anki-mathjax>→<anki-mathjax> V_{6} </anki-mathjax>→<anki-mathjax> V_{8} </anki-mathjax>，权值和<anki-mathjax> 6 + 1 + 9 + 2 = 18 </anki-mathjax><br>2. <strong>关键路径原理</strong>: 最长路径即关键路径<br>3. 图省略，解析基于内容	252
[23. 已知AOE网，求关键路径长度(   )。<br>A. 19<br>B. 20<br>C. 21<br>D. 22]::(C)	1. 计算: 关键路径长度<strong>21</strong>，如路径A→B→E→G等<br>2. 提示: 多路径权值相同均关键<br>3. AOE网分析: 最长路径决定工程时间	252
[24. 下列关于关键路径的叙述，正确的是(   )。<br>A. 缩短关键活动可减少工程时间<br>B. 关键路径是源点到汇点的最短路径<br>C. 改变任一活动持续时间可能改变关键路径<br>D. 所有活动缩短则总时间缩短]::(C)	1. 正确选项: C正确（权值变可能改变关键路径）<br>2. 错误分析: A错误（缩非关键活动无效）；B错误（最长路径）；D错误（需所有关键活动同时缩）<br>3. 原理: <strong>关键路径</strong>是动态的	252
[25. 工程进度管理，以下叙述正确的是(   )。<br>A. 只有缩短所有关键路径活动才能缩短总时间<br>B. 关键路径不唯一则无法管理<br>C. 任一活动改变可能影响总时间<br>D. 关键路径长度代表最短工期]::(C)	1. 正确选项: C正确（任一活动变可能影响）<br>2. 关键路径性质: 代表<strong>最短工期</strong>（D正确但非叙述）<br>3. 管理策略: 多重关键路径时需同时缩（A部分正确）	252
[26. 图的邻接矩阵表示中，若第V列全为∞，则以下叙述正确的是(   )。<br>A. 顶点V没有入边<br>B. 图可能不连通<br>C. 不能确定关键路径<br>D. 以上全对]::(A)	1. 正确选项: A正确（第V列全∞表示无入边）<br>2. 分析: 无入边顶点为起点，但无法确定图连通性或关键路径存在性<br>3. 应用: 用于拓扑排序起点识别	252
[27.【010统考真题】对下图进行拓扑排序，可得不同拓扑序列的个数是(   )。<br>A. 4<br>B. 3<br>C. 2<br>D. 1]::(C)	1. 拓扑序列生成规则: 每次删除入度为0的顶点<br>2. 具体序列数: 本图有<strong>2种不同拓扑序列</strong>（如3,1,4,2,6,5和3,1,4,6,2,5）	254
[28.【012统考真题】下列关于最小生成树的叙述中，正确的是(   )。<br>I. 最小生成树的代价唯一<br>II. 所有权值最小的边一定会出现在所有的最小生成树中<br>III. 使用Prim算法从不同顶点开始得到的最小生成树一定相同<br>IV. 使用Prim算法和Kruskal算法得到的最小生成树总不相同<br>A. 仅Ⅰ<br>B. 仅Ⅱ<br>C. 仅Ⅰ、Ⅲ<br>D. 仅Ⅱ、Ⅳ]::(A)	1. 关键辨析: <strong>代价唯一</strong>（I正确）但树形不一定唯一<br>2. 错误分析: II错误（权值最小边可能形成环路被舍弃）<br>3. 算法特性: Prim从不同顶点开始结果可能不同（III错误）<br>4. 结论: 仅I正确，选A	254
[29.【012统考真题】对下图所示的有向带权图，若采用Dijkstra算法求从源点a到其他各顶点的最短路径，则得到的第一条最短路径的目标顶点是b，第二条最短路径的目标顶点是c，后续得到的其余各最短路径的目标顶点依次是(   )。<br>A. d，e，f<br>B. e，d，f<br>C. f，d，e<br>D. f，e，d]::(C)	1. Dijkstra计算过程: 第一目标b(2),第二目标c(3),第三目标f(4)<br>2. 后续顺序: d(路径a→b→d权5),e(路径a→b→d→e权6)<br>3. 排除法验证: f路径长度4最小故先选,排除ABD	254
[30.【012统考真题】若用邻接矩阵存储有向图，矩阵中主对角线以下的元素均为零，则关于该图拓扑序列的结论是(   )。<br>A. 存在，且唯一<br>B. 存在，且不唯一<br>C. 存在，可能不唯一<br>D. 无法确定是否存在]::(C)	1. 条件分析: 下三角元素零 → <strong>有向无环图</strong><br>2. 拓扑序列: 必定存在但<strong>不一定唯一</strong>（若多顶点入度=0）<br>3. 反例: [[0,1,1],[0,0,0],[0,0,0]]有两个拓扑序列	254
[31.【013统考真题】下列AOE网表示一项包含8个活动的工程。通过同时加快若干活动的进度可缩短整个工程的工期。在下列选项中，加快其进度就可缩短工程工期的是(   )。<br>A. c和e<br>B. d和c<br>C. f和d<br>D. f和h]::(C)	1. 关键路径分析: bdcg、bdeh、bfh<br>2. 覆盖规则: 需同时<strong>覆盖所有关键路径</strong><br>3. 验证: 仅f和d能覆盖所有关键路径（C正确）	254
[32.【014统考真题】对下图所示的有向图进行拓扑排序，得到的拓扑序列可能是(   )。<br>A. 3，1，2，4，6，5<br>B. 3，1，2，4，6，5<br>C. 3，1，4，2，5，6<br>D. 3，1，4，2，6，5]::(D)	1. 序列生成规则: 起点必为3(入度=0)<br>2. 有效序列: 3→1→4→2→6→5 或 3→1→4→6→2→5<br>3. 排除法: C违反依赖顺序(5需在2,6后)	254
[33.【015统考真题】求下面的带权图的最小(代价)生成树时，可能是Kruskal算法第2次选中但不是Prim算法(从<anki-mathjax> V_{4} </anki-mathjax>开始)第2次选中的边是(   )。<br>A. <anki-mathjax> (V_{1},V_{3}) </anki-mathjax><br>B. <anki-mathjax> (V_{1},V_{4}) </anki-mathjax><br>C. <anki-mathjax> (V_{2},V_{3}) </anki-mathjax><br>D. <anki-mathjax> (V_{3},V_{4}) </anki-mathjax>]::(C)	1. Kruskal特性: 第1次选权最小边(V1,V2)<br>2. 第2次候选: 可能选(V2,V3)权5<br>3. Prim特性: 从V4开始第2次必选V4关联边<br>4. 结论: (V2,V3)符合条件，选C	254
[34.【011统考真题】下列关于图的叙述中，正确的是(   )。<br>I.回路是简单路径<br>II.存储稀疏图，用邻接矩阵比邻接表更省空间<br>III.若有向图中存在拓扑序列，则该图不存在回路<br>A. 仅Ⅱ<br>B. 仅Ⅰ、Ⅱ<br>C. 仅Ⅲ<br>D. 仅Ⅰ、Ⅲ]::(C)	1. 正误分析: <br>I错误（回路顶点可重复）<br>II错误（邻接矩阵空间O(n²)不省）<br>III正确（拓扑序列存在⇔无环）<br>2. 结论: 仅III正确，选C	254
[35.【016统考真题】使用Dijkstra算法求下图中从顶点1到其他各顶点的最短路径，依次得到的各最短路径的目标顶点是(   )。<br>A. 5，2，3，4，6<br>B. 5，2，3，6，4<br>C. 5，2，4，3，6<br>D. 5，2，6，3，4]::(B)	1. 路径计算: 1→5(4), 1→2(5), 1→3(7), 1→6(9), 1→4(11)<br>2. 顺序生成: 基于dist={0,5,7,11,4,9}<br>3. 排序逻辑: 从小到大选择→5,2,3,6,4	254
[36.【016统考真题】若对n个顶点，e条弧的有向图采用邻接表存储，则拓扑排序算法的时间复杂度是(   )。<br>A. <anki-mathjax> O(n) </anki-mathjax><br>B. <anki-mathjax> O(n + e) <anki-mathjax><br>C. <anki-mathjax> O(n^{2}) <anki-mathjax><br>D. <anki-mathjax> O(ne) <anki-mathjax>]::(B)	1. 邻接表特性: 需遍历所有顶点和边<br>2. 时间复杂度: <strong>O(n+e)</strong>（标准BFS拓扑排序）<br>3. 对比: 邻接矩阵为O(n²)	254
[37.【018统考真题】下列选项中，不是如下有向图的拓扑序列的是(   )。<br>A. 1，5，2，3，6，4<br>B. 5，1，2，6，3，4<br>C. 5，1，2，3，6，4<br>D. 5，2，1，6，3，4]::(D)	1. 规则验证: 起始顶点需入度=0<br>2. 错误序列: D中5后选2(此时2的入度>0)<br>3. 正确选项: 只有1/5满足起始条件	254
[38.【019统考真题】下图所示的AOE网表示一项包含8个活动的工程，活动d的最早开始时间和最迟开始时间分别是(   )。<br>A. 3和7<br>B. 12和12<br>C. 12和14<br>D. 15和15]::(C)	1. 关键路径计算: bdcg(权27), bdeh, bfh<br>2. 活动d属性: 最早开始=max{前序}=12<br>3. 最迟开始: 27-6-7=14（关键路径反向计算）	254
[39.【2019统考真题】用有向无环图描述表达式<anki-mathjax> (x+y)((x+y)/x) <anki-mathjax>，需要的顶点个数至少是(   )。<br>A. 5<br>B. 6<br>C. 8<br>D. 9]::(A)	1. 表达式树转换: 包含重复子式(x+y)<br>2. 去重优化: 共用相同子式节点<br>3. 最小顶点: 5个（运算符+,*,/及操作数x,y）	256
[40.【2020统考真题】已知无向图G如下所示，使用Kruskal算法求图G的最小生成树，加到最小生成树中的边依次是(   )。<br>A. <anki-mathjax> (b,f),(b,d),(a,e),(c,e),(b,e) <anki-mathjax><br>B. <anki-mathjax> (b,f),(b,d),(b,e),(a,e),(c,e) <anki-mathjax><br>C. <anki-mathjax> (a,e),(b,e),(c,e),(b,d),(b,f) <anki-mathjax><br>D. <anki-mathjax> (a,e),(c,e),(b,e),(b,f),(b,d) <anki-mathjax>]::(A)	1. Kruskal顺序: 按权增序且不形成环<br>2. 边添加序列: (b,f)权1→(b,d)权3→(a,e)权9→(c,e)权10→(b,e)权11<br>3. 验证: 最后加入(b,e)后6顶点连通	256
[41.【2020统考真题】修改递归方式实现的图的深度优先搜索(DFS)算法，将输出(访问)顶点信息的语句移到退出递归前(即执行输出语句后立刻退出递归)。采用修改后的算法遍历有向无环图G，若输出结果中包含G中的全部顶点，则输出的顶点序列是G的(   )。<br>A. 拓扑有序序列<br>B. 逆拓扑有序序列<br>C. 广度优先搜索序列<br>D. 深度优先搜索序列]::(B)	1. 递归性质: 先递归邻接点再输出本顶点<br>2. 序列特性: 每个顶点在其所有后继后输出 → <strong>逆拓扑序</strong><br>3. 对比: 标准DFS序列无此特性	256
[42.【2020统考真题】若使用AOE网估算工程进度，则下列叙述中正确的是(   )。<br>A. 关键路径是从源点到汇点边数最多的一条路径<br>B. 关键路径是从源点到汇点路径长度最长的路径<br>C. 增加任意一个关键活动的时间不会延长工程的工期<br>D. 缩短任意一个关键活动的时间将会缩短工程的工期]::(B)	1. 核心定义: 关键路径是<strong>最长路径</strong>（B正确）<br>2. 正误辨析:<br>A错误（关键路径非边数最多）<br>C错误（增加关键活动必延工期）<br>D错误（多关键路径时无效）	256
[43.【2021统考真题】给定如下有向图，该图的拓扑有序序列的个数是(   )。<br>A. 1<br>B. 2<br>C. 3<br>D. 4]::(A)	1. 拓扑序列生成: 唯一序列A→B→C→D→E→F<br>2. 唯一性证明: 每阶段仅1个入度=0顶点<br>3. 结论: 仅1种拓扑序列	256
[44.【2021统考真题】使用Dijkstra算法求下图中从顶点1到其余各顶点的最短路径，将当前找到的从顶点1到顶点2,3,4,5的最短路径长度保存在数组dist中，求出第二条最短路径后，dist中的内容更新为(   )。<br>A. 26,3,14,6<br>B. 25,3,14,6<br>C. 21,3,14,6<br>D. 15,3,14,6]::(C)	1. 初始dist: [1→2=26, 1→3=3, 1→4=∞, 1→5=6]<br>2. 第一条路径: 选1→5(6), 更新dist[2]=min(26,6+15)=21<br>3. 第二条路径后: dist=[21,3,14,6] (1→4=6+8=14)	256
[45.【2022统考真题】下图是一个有10个活动的AOE网，时间余量最大的活动是(   )。<br>A. c<br>B. g<br>C. h<br>D. j]::(B)	1. 时间余量公式: l(i)-e(i)<br>2. 计算关键: g余量=6 (最大)<br>3. 对比: c=2,h=2,j=2	256
[46.【2023统考真题】已知无向连通图G中各边的权值均为1。在下列算法中，一定能够求出图G中从某顶点到其余各顶点最短路径的是(   )。<br>I. Prim算法<br>II. Kruskal算法<br>III. 图的广度优先搜索算法<br>A. 仅Ⅰ<br>B. 仅Ⅲ<br>C. 仅Ⅰ,Ⅱ<br>D. Ⅰ,Ⅱ,Ⅲ]::(B)	1. 权重特性: 边权=1时最短路等价于BFS<br>2. 算法验证: 仅<strong>BFS(III)</strong>保证最短路<br>3. 反例: Prim/Kruskal生成树路径非最短	256