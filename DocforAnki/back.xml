<!-- Quizify by @chehil (翏央)

Version: 0.1.0
Readme: https://github.com/e-chehil/anki-quizify/blob/main/README.md
Contact Details: 
- Email: chehil@163.com
- WeChat Official Account: Regenhof

-->
<div class="quizify-flashcard">
    <div class="quizify-deck">{{Deck}}</div>
    <div class="quizify-field quizify-field--front">{{Front}}</div>
    {{#Back}}
    <hr class="quizify-divider quizify-divider--answer" id="answer">
    <div class="quizify-field quizify-field--back">{{Back}}</div>
    {{/Back}}
    {{#Tags}}
    <div class="quizify-tags">{{clickable:Tags}}</div>
    {{/Tags}}
</div>

<script>
    // Split hierarchical tags
    var tagsContainerEl = document.querySelectorAll(".quizify-tags > *");
    if (tagsContainerEl.length > 0) {
        var tags = [];
        tagsContainerEl.forEach((tagEl) => {
            tagEl.classList.add("quizify-tag");
            tags.push(tagEl.innerHTML);
            tags.forEach((tag) => {
                var childTag = tag.split("::").filter(Boolean);
                tagEl.innerHTML = childTag[childTag.length - 1].trim();
            });
        });
    } else {
        tagsContainerEl = document.querySelector(".quizify-tags");
        var tags = tagsContainerEl.innerHTML.split(" ").filter(Boolean);
        var html = "";
        tags.forEach((tag) => {
            var childTag = tag.split("::").filter(Boolean);
            html +=
                "<span class='quizify-tag'>" +
                childTag[childTag.length - 1] +
                "</span>";
        });
        tagsContainerEl.innerHTML = html;
    }
</script>

<script>
    // Breadcrumbs to current deck
    var deckEl = document.querySelector(".quizify-deck");
    var subDecks = deckEl.innerHTML.split("::").filter(Boolean);
    html = [];
    subDecks.forEach((subDeck) => {
        html.push("<span class='quizify-subdeck'>" + subDeck + "</span>");
    });
    deckEl.innerHTML = html.join("&nbsp;/&nbsp;");
</script>

<script type="text/javascript">
    function toggleReveal(el) {
        const secret = el.querySelector('.secret');
        if (secret.style.display === "inline") {
            secret.style.display = "none";
            el.classList.remove("active");
        } else {
            secret.style.display = "inline";
            el.classList.add("active");
        }
    }

    function toggleExpand(el) {
        const collapse = el.nextElementSibling;
        if (collapse.style.display === "block") {
            collapse.style.display = "none";
            el.classList.remove("active");
        } else {
            collapse.style.display = "block";
            el.classList.add("active");
        }
    }

    function togglePopup(popup, e) {
        const comment = popup.querySelector('.comment');
        if (comment.style.visibility === "visible") {
            comment.style.opacity = 0;
            comment.style.visibility = "hidden";
        } else {
            positionComment(popup, comment);
            comment.style.visibility = "visible";
            comment.style.opacity = 1;
        }
        e.stopPropagation();
    }

    function positionComment(popup, comment) {
        const popupRect = popup.getBoundingClientRect();
        let commentRect = comment.getBoundingClientRect();
        const pageWidth = window.innerWidth;

        const defaultLeft = popupRect.left + (popupRect.width - commentRect.width) / 2;
        const adjustedLeft = Math.max(10, Math.min(defaultLeft, pageWidth - commentRect.width - 10));
        comment.style.left = `${adjustedLeft}px`;
        comment.style.whiteSpace = "normal";
        commentRect = comment.getBoundingClientRect();

        let adjustedTop = popupRect.top - commentRect.height - 10;
        if (adjustedTop < 0) {
            adjustedTop = popupRect.bottom + 10;
            comment.style.setProperty("--comment-after-top", "-8px");
            comment.style.setProperty("--comment-after-bottom", "auto");
            comment.style.setProperty("--comment-after-border-top", "none");
            comment.style.setProperty("--comment-after-border-bottom", "8px solid var(--comment-bg)");
        }
        comment.style.top = `${adjustedTop}px`;

        const arrowOffset = defaultLeft - adjustedLeft;
        comment.style.setProperty("--comment-after-left", `${arrowOffset}px`);
    }

    function manageBlank(blank, allowInput = true, allowRepeat = true) {
        const key = blank.querySelector('.key');
        const entry = blank.querySelector('.entry');

        if (allowInput) {
            if (entry.style.display === "inline") {
                entry.style.display = "none";
                key.style.display = "inline";
                requestAnimationFrame(() => {
                    key.style.opacity = 1;
                });
            } else {
                key.style.opacity = 0;
                key.style.display = "none";
                entry.style.display = "inline";

                if (allowRepeat) {
                    entry.classList.remove("correct", "incorrect");
                    entry.textContent = "";
                    entry.contentEditable = true;
                }

                if (entry.contentEditable === "true") {
                    entry.focus();
                    editEntry(entry, key, blank);
                }
            }

        } else {
            key.style.opacity = 1 - key.style.opacity;
        }
    }

    function editEntry(entry, key, blank) {
        entry.addEventListener("keydown", (event) => {
            if (event.key === "Backspace") {
                event.stopPropagation();
            }
        });
        entry.onblur = () => {
            entry.contentEditable = false;
            const answer = entry.textContent.trim();
            if (!answer) {
                entry.style.display = "none";
                key.style.display = "inline";
                requestAnimationFrame(() => {
                    key.style.opacity = 1;
                });
                return;
            }
            if (answer === key.textContent.trim()) {
                entry.classList.add("correct");
                entry.textContent = `${answer}✔`;
                blank.setAttribute("tabindex", "-1");
                blank.style.pointerEvents = 'none';
            } else {
                entry.classList.add("incorrect");
                entry.textContent = `${answer}✘`;
            }
        };
    }

    function shuffleOptions(options) {
        let labels = Array.from(options.getElementsByTagName("label"));
        // Fisher-Yates Shuffle
        for (let i = labels.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [labels[i], labels[j]] = [labels[j], labels[i]];
        }
        labels.forEach(label => options.appendChild(label));
    }


    function restoreOptions(options) {
        const labels = Array.from(options.getElementsByTagName("label")).map(label => {
            const inputValue = label.querySelector('input').value;
            return { label, inputValue };
        });
        labels.sort((a, b) => a.inputValue.localeCompare(b.inputValue));
        labels.forEach(item => options.appendChild(item.label));
    }

    function validateChoice(span, shouldShuffle = true, showQuestionType = true) {
        const isAnswered = span.getAttribute("data-is-answered") === "true";
        const correct = span.getAttribute("data-correct-answers");
        const options = span.previousElementSibling;
        if (isAnswered) {
            Array.from(options.getElementsByTagName("label")).forEach(label => {
                label.classList.remove("correct", "incorrect", "not-selected");
                const input = label.querySelector('input');
                const seq = label.querySelector('.option-seq');
                input.disabled = false;
                input.checked = false;
                seq.style.display = "none";
                input.style.display = "inline-block";
            });

            if (shouldShuffle) {
                shuffleOptions(options);
            }

            if (showQuestionType) {
                span.textContent = correct.length === 1 ? "单选题 | " : "多选题 | ";
            } else {
                span.textContent = "";
            }

            span.textContent += "点击显示答案";
            span.classList.remove("correct", "incorrect", "incomplete");
            span.setAttribute("data-is-answered", "false");
        } else {
            restoreOptions(options);
            Array.from(options.getElementsByTagName("label")).forEach(label => {
                const input = label.querySelector('input');
                const seq = label.querySelector('.option-seq');
                input.disabled = true;
                input.style.display = "none";
                seq.style.display = "inline-block";
            });
            
            const correctArray = correct.split("").sort();
            let selectedOptions = [];
            Array.from(options.getElementsByTagName("input")).forEach(input => {
                if (input.checked) {
                    selectedOptions.push(input.value);
                }
            });
            selectedOptions.sort();

            if (selectedOptions.length === 0) {
                span.textContent = "你没有回答";
                span.classList.add("incorrect");
            } else if (JSON.stringify(selectedOptions) === JSON.stringify(correctArray)) {
                span.textContent = "回答正确";
                span.classList.add("correct");
            } else {
                span.textContent = "你的答案：" + selectedOptions.join("");
                if (selectedOptions.every(option => correctArray.includes(option))) {
                    span.classList.add("incomplete");
                } else {
                    span.classList.add("incorrect");
                }
            }

            span.textContent += " | 正确答案：" + correctArray.join("");

            Array.from(options.getElementsByTagName("label")).forEach(label => {
                const input = label.querySelector('input');
                const value = input.value;

                if (input.checked) {
                    if (correct.includes(value)) {
                        label.classList.add("correct");
                    } else {
                        label.classList.add("incorrect");
                    }
                } else {
                    if (correct.includes(value)) {
                        label.classList.add("not-selected");
                    }
                }
            });

            span.setAttribute("data-is-answered", "true");
        }
    }

    document.querySelectorAll('.quizify-field').forEach((el, index) => {
        let mcqIndex = 0;

        el.innerHTML = el.innerHTML.replace(
            /\[\[(.*?)::(?:<br>)?(.*?)\]\](?:<br>)?/g,
            `<div class="expand"><div class="caption" onclick="toggleExpand(this)">$1</div><div class="collapse">$2</div></div>`
        ).replace(
            /(?<!\\)\(\((.*?)::(.*?[^\\])\)\)/g,
            `<span class="reveal" onclick="toggleReveal(this)">$1<span class="secret">$2</span></span>`
        ).replace(
            /\[([^\]]+)\]\^\(([^)]+)\)/g,
            `<span class="popup" onclick="togglePopup(this, event)">$1<span class="comment">$2</span></span>`
        ).replace(
            /\{\{([^\}]+)\}\}/g,
            `<span class="blank" onclick="manageBlank(this)"><span class="key">$1</span><span class="entry" contenteditable="true"></span></span>`
        ).replace(/\[([\s\S]+?)\]::\(([A-Z]+)\)(?:<br>)?/g, (match, options, correct) => {
            const mcqName = `front-mcq-${index}-${mcqIndex++}`;

            options = options.replace(/<br>([A-Za-z])\. (.*?)(?=(<br>[A-Za-z]\. |$))/g, (match, letter, description) => {
                return `<label class="option"><span class="option-header"><input type="${correct.length === 1 ? "radio" : "checkbox"}" name="${mcqName}" value="${letter}"><span class="option-seq">${letter}. </span></span><span class="option-desc">${description}</span></label>`;
            });

            const mcqType = correct.length === 1 ? "单选题 | " : "多选题 | ";
            return `<div class="choice"><div class="options">${options}</div><span class="feedback" onclick="validateChoice(this)" data-correct-answers="${correct}" data-is-answered="false">${mcqType}点击显示答案</span></div>`;
        });
    });

    document.querySelectorAll('.options').forEach(shuffleOptions);

    document.addEventListener("click", () => {
        document.querySelectorAll('.comment').forEach((comment) => {
            comment.style.opacity = 0;
            comment.style.visibility = "hidden";
        });
    });

    document.querySelectorAll('.blank').forEach(element => {
        element.setAttribute("tabindex", "0");
        element.addEventListener("focus", function() {
            manageBlank(this);
        });
        element.addEventListener("keydown", function(e) {
            if (e.key === "Control") {
                e.preventDefault();
                manageBlank(this);
            }
        });
        element.addEventListener("mousedown", function(event) {
            event.preventDefault();
        });
    });

    document.querySelectorAll('input[type="checkbox"]').forEach(element => {
        element.addEventListener("keydown", function(e) {
            if (e.key === "Control") {
                element.checked = !element.checked;
            }
        });
    });

    document.querySelectorAll('.feedback').forEach(element => {
        element.setAttribute("tabindex", "0");
        element.addEventListener("keydown", function(e) {
            if (e.key === "Control") {
                e.preventDefault();
                validateChoice(this);
            }
        });
    });

    document.querySelectorAll('.reveal').forEach(element => {
        element.setAttribute("tabindex", "0");
        element.addEventListener("keydown", function(e) {
            if (e.key === "Control") {
                e.preventDefault();
                toggleReveal(this);
            }
        });
    });

    document.querySelectorAll('.caption').forEach(element => {
        element.setAttribute("tabindex", "0");
        element.addEventListener("keydown", function(e) {
            if (e.key === "Control") {
                e.preventDefault();
                toggleExpand(this);
            }
        });
    });

    document.querySelectorAll('.popup').forEach(element => {
        element.setAttribute("tabindex", "0");
        element.addEventListener("keydown", function(e) {
            if (e.key === "Control") {
                e.preventDefault();
                togglePopup(this, e);
            }
        });
        element.addEventListener("keyup", function(e) {
            if (e.key === "Control") {
                e.preventDefault();
                togglePopup(this, e);
            }
        });
    });

    document.querySelectorAll('.key').forEach((key) => {
        requestAnimationFrame(() => {
            key.style.opacity = 1;
        });
    });

    document.querySelectorAll('.feedback').forEach((span) => {
        requestAnimationFrame(() => {
            const correct = span.getAttribute("data-correct-answers");
            const options = span.previousElementSibling;

            restoreOptions(options);
            Array.from(options.getElementsByTagName("label")).forEach(label => {
                const seq = label.querySelector('.option-seq');
                const input = label.querySelector('input');
                const value = input.value;
                input.disabled = true;
                input.style.display = "none";
                seq.style.display = "inline-block";
                if (correct.includes(value)) {
                    label.classList.add("correct")
                }
            });

            span.textContent = "正确答案：" + correct.split("").sort().join("");
            span.classList.add("correct");
            span.setAttribute("data-is-answered", "true");
        });
    });
/* 献给所有热爱生活热爱学习的朋友。翏央，20241230 */
</script>